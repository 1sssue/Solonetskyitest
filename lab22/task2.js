class ElectricalNetwork {
  constructor() {
    this.powerSources = [];
    this.powerConsumers = [];
    this.powerLines = [];
  }

  addPowerSource(source) {
    this.powerSources.push(source);
  }

  addPowerConsumer(consumer) {
    this.powerConsumers.push(consumer);
  }

  addPowerLine(line) {
    this.powerLines.push(line);
  }

  calculateDailyBalance() {
    let totalElectricityNeeded = 0;
    let totalElectricityGenerated = 0;

    // Calculate electricity generated by power sources
    for (const source of this.powerSources) {
      totalElectricityGenerated += source.generateElectricity();
    }

    // Calculate electricity needed by consumers
    for (const consumer of this.powerConsumers) {
      totalElectricityNeeded += consumer.getElectricityDemandDay();
    }

    // Calculate electricity transmitted through power lines
    for (const line of this.powerLines) {
      const excessElectricity = line.transmitElectricity(
        totalElectricityGenerated - totalElectricityNeeded
      );
      totalElectricityGenerated -= excessElectricity;
    }

    const balance = totalElectricityGenerated - totalElectricityNeeded;
    const price =
      balance >= 0
        ? this.calculateSellPrice(balance)
        : this.calculatePurchasePrice(balance);

    return { balance, price };
  }

  calculateNightlyBalance() {
    let totalElectricityNeeded = 0;
    let totalElectricityGenerated = 0;

    // Calculate electricity generated by power sources (considering only solar panels during the night)
    for (const source of this.powerSources) {
      if (source instanceof SolarPanel) {
        totalElectricityGenerated += source.generateElectricityNight();
      }
    }

    // Calculate electricity needed by consumers
    for (const consumer of this.powerConsumers) {
      totalElectricityNeeded += consumer.getElectricityDemandNight();
    }

    const balance = totalElectricityGenerated - totalElectricityNeeded;
    const price =
      balance >= 0
        ? this.calculateSellPrice(balance)
        : this.calculatePurchasePrice(balance);

    return { balance, price };
  }

  calculatePurchasePrice(amount) {
    // Example implementation of purchase price calculation
    return Math.abs(amount) * 0.1; // Assuming purchase price is $0.1 per megawatt
  }

  calculateSellPrice(amount) {
    // Example implementation of sell price calculation
    return Math.abs(amount) * 0.2; // Assuming sell price is $0.2 per megawatt
  }
}

class PowerSource {
  constructor(power) {
    this.power = power;
  }

  generateElectricity() {
    return this.power;
  }
}

class SolarPanel extends PowerSource {
  constructor(power, efficiency) {
    super(power);
    this.efficiency = efficiency;
  }

  generateElectricity() {
    // Assuming efficiency is a percentage (e.g., 0.1 = 10%)
    return this.power * this.efficiency;
  }

  generateElectricityNight() {
    return 0; // No electricity generated by solar panels at night
  }
}

class PowerConsumer {
  constructor(numApartments, powerDemandDay, powerDemandNight) {
    this.numApartments = numApartments;
    this.powerDemandDay = powerDemandDay;
    this.powerDemandNight = powerDemandNight;
  }

  getElectricityDemandDay() {
    return this.numApartments * this.powerDemandDay;
  }

  getElectricityDemandNight() {
    return this.numApartments * this.powerDemandNight;
  }
}

class PowerLine {
  constructor(powerCapacity, pricePerMegawatt) {
    this.powerCapacity = powerCapacity;
    this.pricePerMegawatt = pricePerMegawatt;
  }

  transmitElectricity(amount) {
    const excessElectricity = Math.max(amount - this.powerCapacity, 0);
    const transmittedElectricity = amount - excessElectricity;
    // Example implementation of cost calculation
    const cost = excessElectricity * this.pricePerMegawatt;
    // Here you might log the cost or handle it in some way
    return transmittedElectricity;
  }
}

// Example usage:
const network = new ElectricalNetwork();

// Add power sources
network.addPowerSource(new PowerSource(50)); // Power station
network.addPowerSource(new SolarPanel(5, 0.8)); // Solar panel with 80% efficiency

// Add power consumers
network.addPowerConsumer(new PowerConsumer(200, 4, 1)); // Residential building with 200 apartments

// Add power lines
network.addPowerLine(new PowerLine(100, 0.05)); // Power line with capacity for 100 MW and price $0.05 per MW

// Calculate daily balance
const dailyBalance = network.calculateDailyBalance();
console.log("Daily Balance:", dailyBalance);

// Calculate nightly balance
const nightlyBalance = network.calculateNightlyBalance();
console.log("Nightly Balance:", nightlyBalance);
